

;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-38F3-7EE4-0C			    |
; |			    University of Illinois			    |
; +-------------------------------------------------------------------------+
;
; Input	SHA256 : 8048A989A538525EC0B355BE589C4370CBFB6BA36FFAD90A0EFD10C697EA0B61
; Input	MD5    : E1417CF906C788058A1990E5F6209715
; Input	CRC32  : 7A4B84D2

; File Name   :	/home/sdasgup3/Github/binary-decompilation/test/variable_recovery/test_1/Output/test_1.clang.o
; Format      :	ELF64 for x86-64 (Relocatable)
;
; Source File :	'test_1.c'

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use64
		assume cs:_text
		assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl foo(int first, int second)
		public foo
foo		proc near		; CODE XREF: main+24p

bar		= dword	ptr -0Ch
second		= dword	ptr -8
first		= dword	ptr -4

		push	rbp
		mov	rbp, rsp
		mov	[rbp+first], edi
		mov	[rbp+second], esi
		mov	esi, [rbp+first]
		shl	esi, 1
		mov	[rbp+bar], esi
		mov	esi, [rbp+second]
		mov	edi, [rbp+bar]
		add	edi, 4
		imul	esi, edi
		mov	[rbp+bar], esi
		mov	eax, [rbp+bar]
		pop	rbp
		retn
foo		endp

; ---------------------------------------------------------------------------
unk_27		db  66h	; f		; DATA XREF: .eh_frame:00000000000000ACo
		db  0Fh
		db  1Fh
		db  84h	; Ñ
		db    0
		db    0
		db    0
		db    0
		db    0

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public main
main		proc near

var_18		= dword	ptr -18h
m		= dword	ptr -14h
argv		= qword	ptr -10h
argc		= dword	ptr -8
var_4		= dword	ptr -4

		push	rbp
		mov	rbp, rsp
		sub	rsp, 20h
		mov	eax, 4
		mov	ecx, 25h ; '%'
		mov	[rbp+var_4], 0
		mov	[rbp+argc], edi
		mov	[rbp+argv], rsi
		mov	edi, eax	; first
		mov	esi, ecx	; second
		call	foo
		mov	rdi, offset format ; "%d\n"
		mov	[rbp+m], eax
		mov	esi, [rbp+m]
		mov	al, 0
		call	printf
		xor	ecx, ecx
		mov	[rbp+var_18], eax
		mov	eax, ecx
		add	rsp, 20h
		pop	rbp

locret_7C:				; DATA XREF: .eh_frame:00000000000000A8o
					; .eh_frame:00000000000000C4o
		retn
main		endp

_text		ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rodata_str1_1	segment	byte public 'CONST' use64
		assume cs:_rodata_str1_1
		;org 7Dh
; char format[4]
format		db '%d',0Ah,0           ; DATA XREF: main+29o
_rodata_str1_1	ends

; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_eh_frame	segment	para public 'CONST' use64
		assume cs:_eh_frame
		;org 88h
		db  14h
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    1
		db  7Ah	; z
		db  52h	; R
		db    0
		db    1
		db  78h	; x
		db  10h
		db    1
		db  1Bh
		db  0Ch
		db    7
		db    8
		db  90h	; ê
		db    1
		db    0
		db    0
		db  18h
		db    0
		db    0
		db    0
		db  1Ch
		db    0
		db    0
		db    0
		dd offset locret_7C+0FFFFFEDCh
		dd offset unk_27
		db    0
		db  41h	; A
		db  0Eh
		db  10h
		db  86h	; Ü
		db    2
		db  43h	; C
		db  0Dh
		db    6
		db    0
		db    0
		db    0
		db  18h
		db    0
		db    0
		db    0
		db  38h	; 8
		db    0
		db    0
		db    0
		dd offset locret_7C+0FFFFFEF0h
		dq 100E41000000004Dh
		db  86h	; Ü
		db    2
		db  43h	; C
		db  0Dh
		db    6
		db    0
		db    0
		db    0
_eh_frame	ends

; ===========================================================================

; Segment type:	Externs
; extern
; int printf(const char	*format, ...)
		extrn printf:near	; CODE XREF: main+3Bp


		end
