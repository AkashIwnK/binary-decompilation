

;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-38F3-7EE4-0C			    |
; |			    University of Illinois			    |
; +-------------------------------------------------------------------------+
;
; Input	SHA256 : 31A21B46D976B2CCFE820EC9D04C2F64ED624A8E57A9808EAA36154FEF66710E
; Input	MD5    : D74D01C316232F2D82E9F8A7D0EEAF21
; Input	CRC32  : 69EFDFB2

; File Name   :	/home/sdasgup3/Github/binary-decompilation/test/variable_recovery/test_2/Output/test_2.clang.o
; Format      :	ELF64 for x86-64 (Relocatable)
;
; Source File :	'test_2.c'

.686p
.mmx
.model flat
.intel_syntax noprefix


; Segment type:	Pure code
; Segment permissions: Read/Execute
_text segment byte public 'CODE' use64
assume cs:_text
assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing


; Attributes: bp-based frame

public foo
foo proc near

var_20=	qword ptr -20h
var_14=	dword ptr -14h
var_4= dword ptr -4

push	rbp
mov	rbp, rsp
mov	[rbp+var_14], edi
mov	[rbp+var_20], rsi
mov	eax, [rbp+var_14]
add	eax, eax
mov	[rbp+var_4], eax
mov	rax, [rbp+var_20]
mov	eax, [rax+4]
add	[rbp+var_4], eax
mov	rax, [rbp+var_20]
movzx	eax, word ptr [rax+10h]
cwde
mov	edx, [rbp+var_4]
sub	edx, eax
mov	rax, [rbp+var_20]
mov	[rax], edx
mov	eax, [rbp+var_4]
pop	rbp
retn
foo endp



; Attributes: bp-based frame

; int __cdecl main(int argc, const char	**argv,	const char **envp)
public main
main proc near

var_40=	qword ptr -40h
var_34=	dword ptr -34h
var_24=	dword ptr -24h
var_20=	dword ptr -20h
var_1C=	dword ptr -1Ch
var_10=	word ptr -10h
var_E= byte ptr	-0Eh
var_D= byte ptr	-0Dh
var_C= byte ptr	-0Ch
var_B= byte ptr	-0Bh
var_8= qword ptr -8

push	rbp
mov	rbp, rsp
sub	rsp, 40h
mov	[rbp+var_34], edi
mov	[rbp+var_40], rsi
mov	rax, fs:28h
mov	[rbp+var_8], rax
xor	eax, eax
mov	[rbp+var_20], 4
mov	[rbp+var_1C], 0FFFFFFFCh
mov	[rbp+var_10], 0Fh
mov	[rbp+var_E], 61h ; 'a'
mov	[rbp+var_D], 62h ; 'b'

loc_70:
mov	[rbp+var_C], 63h ; 'c'
mov	[rbp+var_B], 0
lea	rax, [rbp+var_20]
mov	rsi, rax
mov	edi, 0Bh
call	foo
mov	[rbp+var_24], eax
mov	eax, 0
mov	rdx, [rbp+var_8]
xor	rdx, fs:28h
jz	short locret_A5
call	__stack_chk_fail ; PIC mode

locret_A5:
leave

locret_A6:
retn
main endp

_text ends


; Segment type:	Zero-length
; Segment permissions: Read/Write
_data segment byte public 'DATA' use64
_data ends


; Segment type:	Zero-length
; Segment permissions: Read/Write
_bss segment byte public 'BSS' use64
_bss ends


; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment 'qword' can not be represented in assembly
_eh_frame segment para public 'CONST' use64
assume cs:_eh_frame
;org 0B0h
db  14h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db  7Ah	; z
db  52h	; R
db    0
db    1
db  78h	; x
db  10h
db    1
db  1Bh
db  0Ch
db    7
db    8
db  90h	; ê
db    1
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  1Ch
db    0
db    0
db    0
dd offset locret_A6+0FFFFFE8Ah
dd offset main
db    0
db  41h	; A
db  0Eh
db  10h
db  86h	; Ü
db    2
db  43h	; C
db  0Dh
db    6
db  71h	; q
db  0Ch
db    7
db    8
db    0
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  3Ch	; <
db    0
db    0
db    0
dd offset locret_A6+0FFFFFEA0h
dd offset loc_70+1
db    0
db  41h	; A
db  0Eh
db  10h
db  86h	; Ü
db    2
db  43h	; C
db  0Dh
db    6
db    2
db  6Ch	; l
db  0Ch
db    7
db    8
db    0
db    0
_eh_frame ends


; Segment type:	Externs
; extern
extrn _GLOBAL_OFFSET_TABLE_
extrn __stack_chk_fail:near


end
